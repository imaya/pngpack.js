<?xml version="1.0" encoding="utf-8"?>
<project name="project" default="all" >
  <property name="level" value="ADVANCED_OPTIMIZATIONS"/>
  <property name="src" value="./src"/>
  <property name="def" value="./vendor/zlib.js/define"/>
  <property name="vendor" value="./vendor"/>
  <property name="bin" value="./bin"/>
  <property name="compiler" value="${vendor}/google-closure-compiler/compiler.jar"/>
  <property name="closure_primitives" value="closure-primitives/base.js"/>
  <property name="depswriter" value="closure-primitives/depswriter.py"/>
  <property name="depend" value="deps.js"/>

  <!-- ビルドの事前準備 -->
  <target name="prebuild" description="ビルドの事前準備を行う">
     <mkdir dir="${bin}"/>
  </target>

  <!-- 依存関係を解決する -->
  <target name="deps" description="依存関係を解決する">
    <exec executable="python" failonerror="true">
      <arg line="${depswriter}"/>
      <arg line="--root_with_prefix=&quot;${src} ${src}&quot;"/>
      <arg line="--root_with_prefix=&quot;${vendor} ${vendor}&quot;"/>
      <arg line="--output_file=${depend}"/>
    </exec>
    <fileset dir="." includes="**/src/*.js" id="srcpath"/>
    <pathconvert property="srcfiles" refid="srcpath" pathsep=" "/>
    <echo message="${srcfiles}"/>
  </target>

  <target name="pngpack" depends="deps,prebuild" description="build pngpack.js">
    <!-- 出力ファイル名 -->
    <local name="outfile"/>
    <property name="outfile" value="${bin}/pngpack.min.js"/>
    <!-- ビルド(出力先は一時ファイル) -->
    <java jar="${compiler}" fork="true" failonerror="true">
      <arg line="--warning_level=VERBOSE"/>
      <arg line="--compilation_level=${level}"/>
      <arg line="--define=goog.DEBUG=false"/>
      <arg line="--define=PNGPACK_EXPORT=true"/>
      <arg line="--output_wrapper='(function() {%output%}).call(this);'"/>
      <arg line="--summary_detail_level=3"/>
      <arg line="--language_in=ECMASCRIPT5_STRICT"/>
      <arg line="--use_types_for_optimization"/>
      <arg line="--js_output_file=${outfile}.tmp"/>
      <arg line="--manage_closure_dependencies"/>
      <arg line="--js=${closure_primitives}"/>
      <arg line="--js=${depend}"/>
      <arg line="${def}/typedarray/hybrid.js"/>
      <arg line="${srcfiles}"/>
      <arg line="export/pngpack.js"/>
    </java>
    <!-- ライセンスとビルドされたファイルをプロパティとして読み込む -->
    <local name="license"/>
    <loadfile property="license" srcfile="./LICENSE.min"/>
    <local name="output"/>
    <loadfile property="output" srcfile="${outfile}.tmp"/>
    <!-- ライセンスとビルドされたファイルの結合 -->
    <echo file="${outfile}" append="no" message="${license}"/>
    <echo file="${outfile}" append="yes" message="${output}"/>
    <fixcrlf file="${outfile}" eol="unix" eof="remove"/>
    <!-- 一時ファイルの削除 -->
    <delete file="${outfile}.tmp"/>
  </target>

  <!-- compiler help -->
  <target name="help">
    <java jar="${compiler}" fork="true" failonerror="true">
      <arg line="--help"/>
    </java>
  </target>

  <!-- 全て作成 -->
  <target name="all" depends="pngpack"/>

  <!--  削除 -->
  <target name="clean">
    <delete file="${depend}"/>
    <delete dir="${bin}"/>
  </target>

  <!-- リビルド -->
  <target name="rebuild" depends="clean,all"/>
</project>
<!-- vim: set expandtab ts=2 sw=2: -->
